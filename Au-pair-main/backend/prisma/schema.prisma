// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  AU_PAIR
  HOST_FAMILY
  ADMIN
}

enum MatchStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  ID
  PASSPORT
  VISA
  PROFILE_PHOTO
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  role            UserRole
  isActive        Boolean  @default(true)
  isEmailVerified Boolean  @default(false)
  emailVerifyToken String? 
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  lastLogin       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  auPairProfile    AuPairProfile?
  hostFamilyProfile HostFamilyProfile?
  documents        Document[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  hostBookings     Booking[] @relation("HostBookings")
  auPairBookings   Booking[] @relation("AuPairBookings")
  hostMatches      Match[]   @relation("HostMatches")
  auPairMatches    Match[]   @relation("AuPairMatches")

  @@map("users")
}

model AuPairProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  bio                String?
  languages          String? // JSON string array of languages
  skills             String? // JSON string array of skills
  experience         String?
  education          String?
  videoUrl           String?
  preferredCountries String? // JSON string array of country codes
  hourlyRate         Float?
  currency           String   @default("USD")
  availableFrom      DateTime?
  availableTo        DateTime?
  profilePhotoUrl    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("au_pair_profiles")
}

model HostFamilyProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  familyName        String
  contactPersonName String
  bio               String?
  location          String
  country           String
  numberOfChildren  Int
  childrenAges      String? // JSON string array of ages
  requirements      String?
  preferredLanguages String? // JSON string array of languages
  maxBudget         Float?
  currency          String   @default("USD")
  profilePhotoUrl   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("host_family_profiles")
}

model Match {
  id          String      @id @default(uuid())
  hostId      String
  auPairId    String
  matchScore  Float       @default(0)
  status      MatchStatus @default(PENDING)
  initiatedBy UserRole    // Who initiated the match
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  host   User @relation("HostMatches", fields: [hostId], references: [id], onDelete: Cascade)
  auPair User @relation("AuPairMatches", fields: [auPairId], references: [id], onDelete: Cascade)

  @@unique([hostId, auPairId])
  @@map("matches")
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Document {
  id          String         @id @default(uuid())
  userId      String
  type        DocumentType
  status      DocumentStatus @default(PENDING)
  filename    String
  originalName String
  url         String
  uploadedAt  DateTime       @default(now())
  verifiedAt  DateTime?
  verifiedBy  String?
  notes       String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Booking {
  id        String        @id @default(uuid())
  auPairId  String
  hostId    String
  startDate DateTime
  endDate   DateTime
  status    BookingStatus @default(PENDING)
  totalHours Float?
  hourlyRate Float?
  totalAmount Float?
  currency   String       @default("USD")
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  auPair User @relation("AuPairBookings", fields: [auPairId], references: [id], onDelete: Cascade)
  host   User @relation("HostBookings", fields: [hostId], references: [id], onDelete: Cascade)

  @@map("bookings")
}